// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from '@graphprotocol/graph-ts';

export class ApprovalForAll extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save ApprovalForAll entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ApprovalForAll must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('ApprovalForAll', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(
      store.get_in_block('ApprovalForAll', id.toHexString())
    );
  }

  static load(id: Bytes): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(
      store.get('ApprovalForAll', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set('account', Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get('operator');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes) {
    this.set('operator', Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get('approved');
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set approved(value: boolean) {
    this.set('approved', Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class Initialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Initialized entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Initialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Initialized', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Initialized | null {
    return changetype<Initialized | null>(
      store.get_in_block('Initialized', id.toHexString())
    );
  }

  static load(id: Bytes): Initialized | null {
    return changetype<Initialized | null>(
      store.get('Initialized', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get version(): BigInt {
    let value = this.get('version');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set('version', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class RoleAdminChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RoleAdminChanged entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RoleAdminChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RoleAdminChanged', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RoleAdminChanged | null {
    return changetype<RoleAdminChanged | null>(
      store.get_in_block('RoleAdminChanged', id.toHexString())
    );
  }

  static load(id: Bytes): RoleAdminChanged | null {
    return changetype<RoleAdminChanged | null>(
      store.get('RoleAdminChanged', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get role(): Bytes {
    let value = this.get('role');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set role(value: Bytes) {
    this.set('role', Value.fromBytes(value));
  }

  get previousAdminRole(): Bytes {
    let value = this.get('previousAdminRole');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set previousAdminRole(value: Bytes) {
    this.set('previousAdminRole', Value.fromBytes(value));
  }

  get newAdminRole(): Bytes {
    let value = this.get('newAdminRole');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set newAdminRole(value: Bytes) {
    this.set('newAdminRole', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class RoleGranted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RoleGranted entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RoleGranted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RoleGranted', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RoleGranted | null {
    return changetype<RoleGranted | null>(
      store.get_in_block('RoleGranted', id.toHexString())
    );
  }

  static load(id: Bytes): RoleGranted | null {
    return changetype<RoleGranted | null>(
      store.get('RoleGranted', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get role(): Bytes {
    let value = this.get('role');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set role(value: Bytes) {
    this.set('role', Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set('account', Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class RoleRevoked extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RoleRevoked entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RoleRevoked must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RoleRevoked', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RoleRevoked | null {
    return changetype<RoleRevoked | null>(
      store.get_in_block('RoleRevoked', id.toHexString())
    );
  }

  static load(id: Bytes): RoleRevoked | null {
    return changetype<RoleRevoked | null>(
      store.get('RoleRevoked', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get role(): Bytes {
    let value = this.get('role');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set role(value: Bytes) {
    this.set('role', Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set('account', Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class TransferBatch extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TransferBatch entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TransferBatch must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TransferBatch', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TransferBatch | null {
    return changetype<TransferBatch | null>(
      store.get_in_block('TransferBatch', id.toHexString())
    );
  }

  static load(id: Bytes): TransferBatch | null {
    return changetype<TransferBatch | null>(
      store.get('TransferBatch', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get('operator');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes) {
    this.set('operator', Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get('from');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set('from', Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get('to');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set('to', Value.fromBytes(value));
  }

  get ids(): Array<BigInt> {
    let value = this.get('ids');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigIntArray();
    }
  }

  set ids(value: Array<BigInt>) {
    this.set('ids', Value.fromBigIntArray(value));
  }

  get values(): Array<BigInt> {
    let value = this.get('values');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt>) {
    this.set('values', Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class TransferSingle extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TransferSingle entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TransferSingle must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TransferSingle', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TransferSingle | null {
    return changetype<TransferSingle | null>(
      store.get_in_block('TransferSingle', id.toHexString())
    );
  }

  static load(id: Bytes): TransferSingle | null {
    return changetype<TransferSingle | null>(
      store.get('TransferSingle', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get('operator');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes) {
    this.set('operator', Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get('from');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set('from', Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get('to');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set('to', Value.fromBytes(value));
  }

  get SwissDAOMembership_id(): BigInt {
    let value = this.get('SwissDAOMembership_id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set SwissDAOMembership_id(value: BigInt) {
    this.set('SwissDAOMembership_id', Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get('value');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set('value', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class URI extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save URI entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type URI must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('URI', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): URI | null {
    return changetype<URI | null>(store.get_in_block('URI', id.toHexString()));
  }

  static load(id: Bytes): URI | null {
    return changetype<URI | null>(store.get('URI', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get value(): string {
    let value = this.get('value');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set value(value: string) {
    this.set('value', Value.fromString(value));
  }

  get SwissDAOMembership_id(): BigInt {
    let value = this.get('SwissDAOMembership_id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set SwissDAOMembership_id(value: BigInt) {
    this.set('SwissDAOMembership_id', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class Upgraded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Upgraded entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Upgraded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Upgraded', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Upgraded | null {
    return changetype<Upgraded | null>(
      store.get_in_block('Upgraded', id.toHexString())
    );
  }

  static load(id: Bytes): Upgraded | null {
    return changetype<Upgraded | null>(store.get('Upgraded', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get implementation(): Bytes {
    let value = this.get('implementation');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set implementation(value: Bytes) {
    this.set('implementation', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}
